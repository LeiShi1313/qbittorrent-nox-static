diff --git a/src/base/bittorrent/session.cpp b/src/base/bittorrent/session.cpp
index 99439a360..643dd8d9c 100644
--- a/src/base/bittorrent/session.cpp
+++ b/src/base/bittorrent/session.cpp
@@ -357,7 +357,7 @@ Session::Session(QObject *parent)
     , m_announceToAllTiers(BITTORRENT_SESSION_KEY("AnnounceToAllTiers"), true)
     , m_asyncIOThreads(BITTORRENT_SESSION_KEY("AsyncIOThreadsCount"), 10)
     , m_hashingThreads(BITTORRENT_SESSION_KEY("HashingThreadsCount"), 2)
-    , m_filePoolSize(BITTORRENT_SESSION_KEY("FilePoolSize"), 40)
+    , m_filePoolSize(BITTORRENT_SESSION_KEY("FilePoolSize"), 500)
     , m_checkingMemUsage(BITTORRENT_SESSION_KEY("CheckingMemUsageSize"), 32)
     , m_diskCacheSize(BITTORRENT_SESSION_KEY("DiskCacheSize"), -1)
     , m_diskCacheTTL(BITTORRENT_SESSION_KEY("DiskCacheTTL"), 60)
@@ -368,11 +368,11 @@ Session::Session(QObject *parent)
     , m_coalesceReadWriteEnabled(BITTORRENT_SESSION_KEY("CoalesceReadWrite"), false)
 #endif
     , m_usePieceExtentAffinity(BITTORRENT_SESSION_KEY("PieceExtentAffinity"), false)
-    , m_isSuggestMode(BITTORRENT_SESSION_KEY("SuggestMode"), false)
-    , m_sendBufferWatermark(BITTORRENT_SESSION_KEY("SendBufferWatermark"), 500)
-    , m_sendBufferLowWatermark(BITTORRENT_SESSION_KEY("SendBufferLowWatermark"), 10)
-    , m_sendBufferWatermarkFactor(BITTORRENT_SESSION_KEY("SendBufferWatermarkFactor"), 50)
-    , m_socketBacklogSize(BITTORRENT_SESSION_KEY("SocketBacklogSize"), 30)
+    , m_isSuggestMode(BITTORRENT_SESSION_KEY("SuggestMode"), true)
+    , m_sendBufferWatermark(BITTORRENT_SESSION_KEY("SendBufferWatermark"), 3 * 1024)
+    , m_sendBufferLowWatermark(BITTORRENT_SESSION_KEY("SendBufferLowWatermark"), 1024)
+    , m_sendBufferWatermarkFactor(BITTORRENT_SESSION_KEY("SendBufferWatermarkFactor"), 150)
+    , m_socketBacklogSize(BITTORRENT_SESSION_KEY("SocketBacklogSize"), 3000)
     , m_isAnonymousModeEnabled(BITTORRENT_SESSION_KEY("AnonymousModeEnabled"), false)
     , m_isQueueingEnabled(BITTORRENT_SESSION_KEY("QueueingSystemEnabled"), false)
     , m_maxActiveDownloads(BITTORRENT_SESSION_KEY("MaxActiveDownloads"), 3, lowerLimited(-1))
@@ -391,8 +391,8 @@ Session::Session(QObject *parent)
     , m_announceIP(BITTORRENT_SESSION_KEY("AnnounceIP"))
     , m_maxConcurrentHTTPAnnounces(BITTORRENT_SESSION_KEY("MaxConcurrentHTTPAnnounces"), 50)
     , m_stopTrackerTimeout(BITTORRENT_SESSION_KEY("StopTrackerTimeout"), 5)
-    , m_maxConnections(BITTORRENT_SESSION_KEY("MaxConnections"), 500, lowerLimited(0, -1))
-    , m_maxUploads(BITTORRENT_SESSION_KEY("MaxUploads"), 20, lowerLimited(0, -1))
+    , m_maxConnections(BITTORRENT_SESSION_KEY("MaxConnections"), 8000, lowerLimited(0, -1))
+    , m_maxUploads(BITTORRENT_SESSION_KEY("MaxUploads"), -1, lowerLimited(0, -1))
     , m_maxConnectionsPerTorrent(BITTORRENT_SESSION_KEY("MaxConnectionsPerTorrent"), 100, lowerLimited(0, -1))
     , m_maxUploadsPerTorrent(BITTORRENT_SESSION_KEY("MaxUploadsPerTorrent"), 4, lowerLimited(0, -1))
     , m_btProtocol(BITTORRENT_SESSION_KEY("BTProtocol"), BTProtocol::Both
@@ -1095,7 +1095,7 @@ void Session::initializeNativeSession()
     // Speed up exit
     pack.set_int(lt::settings_pack::auto_scrape_interval, 1200); // 20 minutes
     pack.set_int(lt::settings_pack::auto_scrape_min_interval, 900); // 15 minutes
-    pack.set_int(lt::settings_pack::connection_speed, 20); // default is 10
+    pack.set_int(lt::settings_pack::connection_speed, 500); // default is 10
     // libtorrent 1.1 enables UPnP & NAT-PMP by default
     // turn them off before `lt::session` ctor to avoid split second effects
     pack.set_bool(lt::settings_pack::enable_upnp, false);
@@ -1437,6 +1437,39 @@ void Session::loadLTSettings(lt::settings_pack &settingsPack)
         settingsPack.set_int(lt::settings_pack::seed_choking_algorithm, lt::settings_pack::anti_leech);
         break;
     }
+
+    // High Performance Seed settings
+    settingsPack.set_int(lt::settings_pack::max_out_request_queue, 1500);
+    settingsPack.set_int(lt::settings_pack::max_allowed_in_request_queue, 2000);
+    settingsPack.set_int(lt::settings_pack::max_peer_recv_buffer_size, 5 * 1024 * 1024);
+    settingsPack.set_int(lt::settings_pack::alert_queue_size, 10000);
+    settingsPack.set_bool(lt::settings_pack::no_atime_storage, true);
+    // settingsPack.set_int(lt::settings_pack::connection_speed, 500);
+    // settingsPack.set_int(lt::settings_pack::connections_limit, 8000);
+    // settingsPack.set_int(lt::settings_pack::listen_queue_size, 3000);
+    // settingsPack.set_int(lt::settings_pack::unchoke_slots_limit, -1);
+    settingsPack.set_int(lt::settings_pack::read_cache_line_size, 32);
+    settingsPack.set_int(lt::settings_pack::write_cache_line_size, 256);
+    settingsPack.set_int(lt::settings_pack::max_queued_disk_bytes, 7 * 1024 * 1024);
+    settingsPack.set_int(lt::settings_pack::allowed_fast_set_size, 0);
+    // settingsPack.set_int(lt::settings_pack::suggest_mode, lt::settings_pack::suggest_read_cache);
+    settingsPack.set_bool(lt::settings_pack::close_redundant_connections, true);
+    settingsPack.set_int(lt::settings_pack::max_rejects, 10);
+    settingsPack.set_int(lt::settings_pack::send_not_sent_low_watermark, 524288);
+    settingsPack.set_int(lt::settings_pack::request_timeout, 10);
+    settingsPack.set_int(lt::settings_pack::peer_timeout, 20);
+    settingsPack.set_int(lt::settings_pack::inactivity_timeout, 20);
+    // settingsPack.set_int(lt::settings_pack::active_limit, 20000);
+    // settingsPack.set_int(lt::settings_pack::active_tracker_limit, 2000);
+    // settingsPack.set_int(lt::settings_pack::active_dht_limit, 600);
+    // settingsPack.set_int(lt::settings_pack::active_seeds, 2000);
+    // settingsPack.set_int(lt::settings_pack::choking_algorithm, lt::settings_pack::fixed_slots_choker);
+    // settingsPack.set_int(lt::settings_pack::send_buffer_watermark, 3 * 1024 * 1024);
+    // settingsPack.set_int(lt::settings_pack::send_buffer_watermark_factor, 150);
+    settingsPack.set_int(lt::settings_pack::send_buffer_low_watermark, 1 * 1024 * 1024);
+    settingsPack.set_int(lt::settings_pack::max_failcount, 1);
+    // settingsPack.set_int(lt::settings_pack::aio_threads, 8);
+    // settingsPack.set_int(lt::settings_pack::checking_mem_usage, 2048);
 }
 
 void Session::configureNetworkInterfaces(lt::settings_pack &settingsPack)
